[{"C:\\react_projects\\project1\\reactone\\src\\index.js":"1","C:\\react_projects\\project1\\reactone\\src\\App.js":"2","C:\\react_projects\\project1\\reactone\\src\\reportWebVitals.js":"3","C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\Profile.jsx":"4","C:\\react_projects\\project1\\reactone\\src\\components\\Navbar\\Navbar.jsx":"5","C:\\react_projects\\project1\\reactone\\src\\components\\Header\\Header.jsx":"6","C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\MyPosts\\MyPosts.jsx":"7","C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\MyPosts\\Post\\Post.jsx":"8","C:\\react_projects\\project1\\reactone\\src\\components\\Dialogs\\Dialogs.jsx":"9","C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.jsx":"10","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\index.js":"11","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\App.js":"12","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js":"13","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx":"14","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx":"15","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx":"16","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\index.js":"17","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\App.js":"18","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js":"19","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx":"20","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx":"21","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":714,"mtime":1611328282135,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":276,"mtime":1611327803495,"results":"27","hashOfConfig":"24"},{"size":882,"mtime":1611309553188,"results":"28","hashOfConfig":"24"},{"size":295,"mtime":1611245156366,"results":"29","hashOfConfig":"24"},{"size":579,"mtime":1611330555183,"results":"30","hashOfConfig":"24"},{"size":400,"mtime":1611255002366,"results":"31","hashOfConfig":"24"},{"size":1029,"mtime":1611324309389,"results":"32","hashOfConfig":"24"},{"size":382,"mtime":1611330100083,"results":"33","hashOfConfig":"24"},{"size":500,"mtime":499162500000,"results":"34","hashOfConfig":"35"},{"size":2062,"mtime":1611919882145,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"35"},{"size":533,"mtime":1611919920576,"results":"38","hashOfConfig":"35"},{"size":11209,"mtime":1612364179404,"results":"39","hashOfConfig":"35"},{"size":14778,"mtime":1612364876526,"results":"40","hashOfConfig":"35"},{"size":517,"mtime":1614863701071,"results":"41","hashOfConfig":"42"},{"size":2127,"mtime":1614863701064,"results":"43","hashOfConfig":"42"},{"size":375,"mtime":1614863701072,"results":"44","hashOfConfig":"42"},{"size":533,"mtime":1614863701069,"results":"45","hashOfConfig":"42"},{"size":11209,"mtime":1614933592533,"results":"46","hashOfConfig":"42"},{"size":13754,"mtime":1614946147839,"results":"47","hashOfConfig":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1h8omqj",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"mor9lo",{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"73"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"73"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1szki2b",{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"89"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},"C:\\react_projects\\project1\\reactone\\src\\index.js",[],["104","105"],"C:\\react_projects\\project1\\reactone\\src\\App.js",[],"C:\\react_projects\\project1\\reactone\\src\\reportWebVitals.js",[],"C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\Profile.jsx",["106"],"C:\\react_projects\\project1\\reactone\\src\\components\\Navbar\\Navbar.jsx",["107","108","109"],"C:\\react_projects\\project1\\reactone\\src\\components\\Header\\Header.jsx",["110"],"import React from 'react'; \r\nimport s from './Header.module.css';\r\n\r\nconst Header = () =>{\r\n    return <header className={s.header}>\r\n    <img src=\"https://cdn.shopify.com/shopifycloud/hatchful-web/assets/5332ffcb554a06a5ecd7351a5309f011.svg\"></img>    \r\n  </header>\r\n}\r\n\r\nexport default Header;","C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\MyPosts\\MyPosts.jsx",[],"C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\MyPosts\\Post\\Post.jsx",["111"],"import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n  console.log(props.message);\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Post;","C:\\react_projects\\project1\\reactone\\src\\components\\Dialogs\\Dialogs.jsx",[],"C:\\react_projects\\project1\\reactone\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.jsx",["112"],"C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\index.js",[],["113","114"],"C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\App.js",["115","116"],"import './App.css';\nimport Header from './components/Header/Header';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport React, {Component} from \"react\";\nimport $ from \"jquery\";\nimport EditCategories from \"./components/EditCategories/EditCategories\";\nimport EditBanners from \"./components/EditBanners/EditBanners\";\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.getCategoryFormData = this.getCategoryFormData.bind(this);\n    }\n\n    getCategoryFormData(category,reqid){\n        this.state.categoryName = category;\n        this.state.categoryReqId = reqid;\n        console.log(this.state.categoryName+'   '+this.state.categoryReqId);\n    }\n\n    OnClickCreateNewCategory = () => {\n        console.log(\"OnClickCreateNewCategory \");\n            $.ajax({\n                type: 'POST',\n                url: 'http://localhost:8080/AddCategory',\n                contentType: 'application/json; charset=utf-8',\n                data:  JSON.stringify({category_name:this.state.categoryName,categoryReqId:this.state.categoryReqId}),\n                dataType: 'json',\n                async: true,\n                cache: false,\n                success: function() {\n                    console.log(\"add category query is success\")\n                    this.setState({\n                        isLoaded: true\n                    });\n\n                }.bind(this),\n                error: function(xhr, status, err) {\n                    console.error(this.props.url, status, err.toString());\n                }.bind(this)\n            });\n    }\n\n\n    ////component={() => <EditBanners updateData={this.updateData} />}\n\n    render(){\n        return (\n            <BrowserRouter>\n                <div className='app-wrapper'>\n                    <Header/>\n                    <Route path='/CategoryEdit' component={EditCategories}/>\n                    <Route path='/BannersEdit' component={EditBanners}/>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\n\n\n\n\n","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js",[],"C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx",["117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import s from \"./EditCategories.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditCategories extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            categoryName: \"\",\r\n            categoryReqId: \"\",\r\n            currentCategoryId: null,\r\n            data: null,\r\n            isCreatingNewCategory: false,\r\n            currentSearch: \"\",\r\n            responseFromServer: null\r\n        };\r\n        this.OnClickSaveCategory =  this.OnClickSaveCategory.bind(this);\r\n    };\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    onClickDeleteCategory(e){\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteCategory',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"idCategory\": this.state.currentCategoryId}),\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success\" + data);\r\n                this.setState({\r\n                    isLoaded: true,\r\n                });\r\n                if (data != null) {\r\n                    this.state.responseFromServer = data;\r\n\r\n                }\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveCategory(e) {\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        let category =\r\n            {\r\n                category_name: this.state.categoryName,\r\n                categoryReqId: this.state.categoryReqId,\r\n                idCategory: this.state.currentCategoryId\r\n            };\r\n\r\n        if (this.state.isCreatingNewCategory) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n            this.state.isCreatingNewCategory = false;\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n        this.componentDidMount();\r\n    }\r\n\r\n    OnClickCreateNewCategory = () => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = true;\r\n        this.state.categoryName = \"\";\r\n        this.state.categoryReqId = \"\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllCategories();\r\n    }\r\n\r\n    GetAllCategories = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategories',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewCategory = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewCategory=false\r\n                        : null\r\n                ));\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n    }\r\n\r\n    saveToStateNameReqId = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryName = item.name;\r\n        });\r\n\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryReqId = item.req_name\r\n        });\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentCategoryId==null)\r\n        {\r\n            this.state.currentCategoryId = id;\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n        if (id == this.state.currentCategoryId) {\r\n          ////  console.log(id +\" this id is active link\");\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentCategory = (id) => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = false;\r\n        this.state.currentCategoryId = id;\r\n        this.saveToStateNameReqId(id);\r\n        this.componentDidMount();\r\n    }\r\n\r\n    render() {\r\n        const {error, isLoaded, data} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Categories:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                               autoFocus\r\n                               className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                            <div>\r\n                                <p onClick={()=>this.setNewCurrentCategory(item.id)}\r\n                                   className={!this.state.isCreatingNewCategory ? this.getClassforLink(item.id):null}>{item.name}</p>\r\n                            </div>\r\n                            ):null\r\n                        ))}\r\n                        {this.state.isCreatingNewCategory ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New category</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewCategory}>\r\n                                Create new category\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewCategory ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new category</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.categoryName} ID: {this.state.currentCategoryId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.categoryName = e.target.value}}\r\n                                            defaultValue={this.state.categoryName}\r\n                                            key={this.state.categoryName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Request id <input onChange={(e)=>{this.state.categoryReqId = e.target.value}}\r\n                                                  defaultValue={this.state.categoryReqId}\r\n                                                  key={this.state.categoryReqId}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveCategory(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteCategory(e)}}\r\n                                        className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","C:\\Users\\ален\\Desktop\\java\\jartestWork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import s from \"./EditBanners.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditBanners extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bannerName: \"\",\r\n            price: \"\",\r\n            currentBannerId: null,\r\n            currentCategory: \"\",\r\n            bannerText: \"\",\r\n            data: null,\r\n            isCreatingNewBanner: false,\r\n            allCategoryNames: \"\",\r\n            responseFromServer: \"\",\r\n            currentSearch: \"\"\r\n        };\r\n        this.OnClickSaveBanner =  this.OnClickSaveBanner.bind(this);\r\n    };\r\n\r\n    onClickDeleteBanner(e){\r\n        e.preventDefault();\r\n        if(this.state.bannerName==null || this.state.bannerText==null ||\r\n            this.state.bannerName===\"\" || this.state.bannerText===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteBanner',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"bannerId\": this.state.currentBannerId,\"category_id\": this.state.currentCategory}),\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success  \" + data);\r\n                this.setState({\r\n                    isLoaded: true\r\n                });\r\n                if (!data == null) {\r\n                    this.state.responseFromServer = data;\r\n                }\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        console.log(e.target.value);\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveBanner(e) {\r\n        e.preventDefault();\r\n\r\n        if(this.state.bannerName===\"\" || this.state.price===\"\" ||\r\n            this.state.bannerText===\"\" ){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        this.state.price = Number(this.state.price);\r\n        if(!Number.isInteger(this.state.price)){\r\n            alert(\"Price должно быть числом\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.currentCategory==\"\" && this.state.allCategoryNames[0]==null){\r\n            alert(\"Создайте хотя бы одня категорию!\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.allCategoryNames != null && this.state.currentCategory==\"\")\r\n            this.state.currentCategory = this.state.allCategoryNames[0].name;\r\n\r\n        let banner =\r\n            {\r\n                id: this.state.currentBannerId,\r\n                bannerName: this.state.bannerName,\r\n                price: this.state.price,\r\n                currentCategory: this.state.currentCategory,\r\n                bannerText: this.state.bannerText\r\n            };\r\n\r\n        if (this.state.isCreatingNewBanner) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    this.state.isCreatingNewBanner = false;\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.state.isCreatingNewBanner = false;\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update banner query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OnClickCreateNewBanner = () => {\r\n        this.state.isCreatingNewBanner = true;\r\n\r\n        this.state.bannerName=\"\";\r\n        this.state.bannerText=\"\";\r\n        this.state.price=\"\";\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllBanners();\r\n    }\r\n\r\n    GetAllBanners = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetBanners',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewBanner = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewBanner=false\r\n                        : null\r\n                ));\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategoryNames',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    allCategoryNames: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n    }\r\n\r\n    saveToStateCurrentData = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id) {\r\n                this.state.currentBannerId = item.id;\r\n                this.state.bannerName = item.name;\r\n                this.state.price = item.price;\r\n                this.state.bannerText = item.content;\r\n            }\r\n        });\r\n\r\n        this.state.allCategoryNames.map(categories => {\r\n            /// console.log(\"item name ->  \"+ item.name);\r\n            if (categories.banners.name === this.state.bannerName) {\r\n\r\n                this.state.currentCategory = categories.name;\r\n            }\r\n            Object.keys(categories).map((baner, index) => {\r\n                ///console.log(categories[baner]);\r\n                if (index == 1) {\r\n                    Object.keys(categories[baner]).map((banerIterator, indexSec) => {\r\n                        /// console.log(categories[baner][banerIterator]); console.log(\"index----\"+ index);\r\n                        if (this.state.bannerName === categories[baner][banerIterator].name &&\r\n                            this.state.bannerText === categories[baner][banerIterator].content) {\r\n                            this.state.currentCategory = categories.name;\r\n                            ///console.log(categories.name + \" its nameeeeeeeeeee\");\r\n                        }\r\n                    })\r\n                };\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentBannerId==null || id == this.state.currentBannerId)\r\n        {\r\n            this.state.currentBannerId = id;\r\n            this.saveToStateCurrentData(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentBanner = (id) => {\r\n        this.state.isCreatingNewBanner = false;\r\n        if(this.state.responseFromServer) {\r\n            this.componentDidMount();\r\n            this.state.responseFromServer = false;\r\n        }\r\n        this.state.currentBannerId = id;\r\n        this.saveToStateCurrentData(id);\r\n\r\n        this.render();\r\n        this.forceUpdate();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {error, isLoaded, data, allCategoryNames} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Banners:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                        autoFocus\r\n                        className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                                    <div>\r\n                                        <p onClick={() => this.setNewCurrentBanner(item.id)}\r\n                                           className={!this.state.isCreatingNewBanner ? this.getClassforLink(item.id) : null}>{item.name}</p>\r\n                                    </div>)\r\n                                : null\r\n                        ))}\r\n\r\n\r\n\r\n\r\n                        {this.state.isCreatingNewBanner ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New banner</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewBanner}>\r\n                                Create new banner\r\n                        </button>\r\n\r\n                    </div>\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewBanner ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new banner</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.bannerName} ID: {this.state.currentBannerId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.bannerName =e.target.value}}\r\n                                            defaultValue={this.state.bannerName}\r\n                                            key={this.state.bannerName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Price <input onChange={(e)=>{this.state.price = e.target.value}}\r\n                                                  defaultValue={this.state.price}\r\n                                                  key={this.state.price}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                   Category <select onChange={(e)=>{this.state.currentCategory = e.target.value}}\r\n                                                    defaultValue={this.state.currentCategory}\r\n                                                    key={this.state.currentCategory} >\r\n                                        {allCategoryNames.map(item => (\r\n                                            <option value={item.name} >{item.name}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div>\r\n                                    Text <textarea onChange={(e)=>{this.state.bannerText = e.target.value}}\r\n                                                    defaultValue={this.state.bannerText}\r\n                                                    key={this.state.bannerText}\r\n                                                    type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveBanner(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteBanner(e)}}\r\n                                   className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\index.js",[],["177","178"],"C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\App.js",["179","180"],"import './App.css';\r\nimport Header from './components/Header/Header';\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\nimport EditCategories from \"./components/EditCategories/EditCategories\";\r\nimport EditBanners from \"./components/EditBanners/EditBanners\";\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n        this.getCategoryFormData = this.getCategoryFormData.bind(this);\r\n    }\r\n\r\n    getCategoryFormData(category,reqid){\r\n        this.state.categoryName = category;\r\n        this.state.categoryReqId = reqid;\r\n        console.log(this.state.categoryName+'   '+this.state.categoryReqId);\r\n    }\r\n\r\n    OnClickCreateNewCategory = () => {\r\n        console.log(\"OnClickCreateNewCategory \");\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data:  JSON.stringify({category_name:this.state.categoryName,categoryReqId:this.state.categoryReqId}),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function() {\r\n                    console.log(\"add category query is success\")\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n\r\n                }.bind(this),\r\n                error: function(xhr, status, err) {\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n    }\r\n\r\n\r\n    ////component={() => <EditBanners updateData={this.updateData} />}\r\n\r\n    render(){\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <Header/>\r\n                    <Route path='/CategoryEdit' component={EditCategories}/>\r\n                    <Route path='/BannersEdit' component={EditBanners}/>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js",[],"C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"import s from \"./EditCategories.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditCategories extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            categoryName: \"\",\r\n            categoryReqId: \"\",\r\n            currentCategoryId: null,\r\n            data: null,\r\n            isCreatingNewCategory: false,\r\n            currentSearch: \"\",\r\n            responseFromServer: null\r\n        };\r\n        this.OnClickSaveCategory =  this.OnClickSaveCategory.bind(this);\r\n    };\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    onClickDeleteCategory(e){\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteCategory',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"idCategory\": this.state.currentCategoryId}),\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success\" + data);\r\n                this.setState({\r\n                    isLoaded: true,\r\n                });\r\n                if (data != null) {\r\n                    this.state.responseFromServer = data;\r\n\r\n                }\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveCategory(e) {\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        let category =\r\n            {\r\n                category_name: this.state.categoryName,\r\n                categoryReqId: this.state.categoryReqId,\r\n                idCategory: this.state.currentCategoryId\r\n            };\r\n\r\n        if (this.state.isCreatingNewCategory) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n            this.state.isCreatingNewCategory = false;\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n        this.componentDidMount();\r\n    }\r\n\r\n    OnClickCreateNewCategory = () => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = true;\r\n        this.state.categoryName = \"\";\r\n        this.state.categoryReqId = \"\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllCategories();\r\n    }\r\n\r\n    GetAllCategories = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategories',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewCategory = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewCategory=false\r\n                        : null\r\n                ));\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n    }\r\n\r\n    saveToStateNameReqId = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryName = item.name;\r\n        });\r\n\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryReqId = item.reqName;\r\n        });\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentCategoryId==null)\r\n        {\r\n            this.state.currentCategoryId = id;\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n        if (id == this.state.currentCategoryId) {\r\n          ////  console.log(id +\" this id is active link\");\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentCategory = (id) => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = false;\r\n        this.state.currentCategoryId = id;\r\n        this.saveToStateNameReqId(id);\r\n        this.componentDidMount();\r\n    }\r\n\r\n    render() {\r\n        const {error, isLoaded, data} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Categories:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                               autoFocus\r\n                               className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                            <div>\r\n                                <p onClick={()=>this.setNewCurrentCategory(item.id)}\r\n                                   className={!this.state.isCreatingNewCategory ? this.getClassforLink(item.id):null}>{item.name}</p>\r\n                            </div>\r\n                            ):null\r\n                        ))}\r\n                        {this.state.isCreatingNewCategory ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New category</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewCategory}>\r\n                                Create new category\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewCategory ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new category</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.categoryName} ID: {this.state.currentCategoryId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.categoryName = e.target.value}}\r\n                                            defaultValue={this.state.categoryName}\r\n                                            key={this.state.categoryName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Request id <input onChange={(e)=>{this.state.categoryReqId = e.target.value}}\r\n                                                  defaultValue={this.state.categoryReqId}\r\n                                                  key={this.state.categoryReqId}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveCategory(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteCategory(e)}}\r\n                                        className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","C:\\Users\\ален\\Desktop\\java\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235"],"import s from \"./EditBanners.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditBanners extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bannerName: \"\",\r\n            price: \"\",\r\n            currentBannerId: null,\r\n            currentCategory: \"\",\r\n            bannerText: \"\",\r\n            data: null,\r\n            isCreatingNewBanner: false,\r\n            allCategoryNames: \"\",\r\n            responseFromServer: \"\",\r\n            currentSearch: \"\"\r\n        };\r\n        this.OnClickSaveBanner =  this.OnClickSaveBanner.bind(this);\r\n    };\r\n\r\n    onClickDeleteBanner(e){\r\n        e.preventDefault();\r\n        if(this.state.bannerName==null || this.state.bannerText==null ||\r\n            this.state.bannerName===\"\" || this.state.bannerText===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteBanner',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"bannerId\": this.state.currentBannerId,\"category_id\": this.state.currentCategory}),\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success  \" + data);\r\n                this.setState({\r\n                    isLoaded: true\r\n                });\r\n                if (!data == null) {\r\n                    this.state.responseFromServer = data;\r\n                }\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        console.log(e.target.value);\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveBanner(e) {\r\n        e.preventDefault();\r\n\r\n        if(this.state.bannerName===\"\" || this.state.price===\"\" ||\r\n            this.state.bannerText===\"\" ){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        this.state.price = Number(this.state.price);\r\n        if(!Number.isInteger(this.state.price)){\r\n            alert(\"Price должно быть числом\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.currentCategory==\"\" && this.state.allCategoryNames[0]==null){\r\n            alert(\"Создайте хотя бы одня категорию!\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.allCategoryNames != null && this.state.currentCategory==\"\")\r\n            this.state.currentCategory = this.state.allCategoryNames[0].name;\r\n\r\n        let banner =\r\n            {\r\n                id: this.state.currentBannerId,\r\n                bannerName: this.state.bannerName,\r\n                price: this.state.price,\r\n                currentCategory: this.state.currentCategory,\r\n                bannerText: this.state.bannerText\r\n            };\r\n\r\n        if (this.state.isCreatingNewBanner) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    this.state.isCreatingNewBanner = false;\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.state.isCreatingNewBanner = false;\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update banner query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OnClickCreateNewBanner = () => {\r\n        this.state.isCreatingNewBanner = true;\r\n\r\n        this.state.bannerName=\"\";\r\n        this.state.bannerText=\"\";\r\n        this.state.price=\"\";\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllBanners();\r\n    }\r\n\r\n    GetAllBanners = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetBanners',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewBanner = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewBanner=false\r\n                        : null\r\n                ));\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategoryNames',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    allCategoryNames: data,\r\n                    isLoaded: true\r\n                });\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n    }\r\n\r\n    saveToStateCurrentData = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id) {\r\n                this.state.currentBannerId = item.id;\r\n                this.state.bannerName = item.name;\r\n                this.state.price = item.price;\r\n                this.state.bannerText = item.content;\r\n                this.state.currentCategory = item.categoryId;\r\n            }\r\n        });\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentBannerId==null || id == this.state.currentBannerId)\r\n        {\r\n            this.state.currentBannerId = id;\r\n            this.saveToStateCurrentData(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentBanner = (id) => {\r\n        this.state.isCreatingNewBanner = false;\r\n        if(this.state.responseFromServer) {\r\n            this.componentDidMount();\r\n            this.state.responseFromServer = false;\r\n        }\r\n        this.state.currentBannerId = id;\r\n        this.saveToStateCurrentData(id);\r\n\r\n        this.render();\r\n        this.forceUpdate();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {error, isLoaded, data, allCategoryNames} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Banners:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                        autoFocus\r\n                        className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                                    <div>\r\n                                        <p onClick={() => this.setNewCurrentBanner(item.id)}\r\n                                           className={!this.state.isCreatingNewBanner ? this.getClassforLink(item.id) : null}>{item.name}</p>\r\n                                    </div>)\r\n                                : null\r\n                        ))}\r\n\r\n\r\n\r\n\r\n                        {this.state.isCreatingNewBanner ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New banner</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewBanner}>\r\n                                Create new banner\r\n                        </button>\r\n\r\n                    </div>\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewBanner ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new banner</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.bannerName} ID: {this.state.currentBannerId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.bannerName =e.target.value}}\r\n                                            defaultValue={this.state.bannerName}\r\n                                            key={this.state.bannerName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Price <input onChange={(e)=>{this.state.price = e.target.value}}\r\n                                                  defaultValue={this.state.price}\r\n                                                  key={this.state.price}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                   Category <select onChange={(e)=>{this.state.currentCategory = e.target.value}}\r\n                                                    defaultValue={this.state.currentCategory}\r\n                                                    key={this.state.currentCategory} >\r\n                                        {allCategoryNames.map(item => (\r\n                                            <option value={item} >{item}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div>\r\n                                    Text <textarea onChange={(e)=>{this.state.bannerText = e.target.value}}\r\n                                                    defaultValue={this.state.bannerText}\r\n                                                    key={this.state.bannerText}\r\n                                                    type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveBanner(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteBanner(e)}}\r\n                                   className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n",["236","237"],{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":2,"column":8,"nodeType":"244","messageId":"245","endLine":2,"endColumn":9},{"ruleId":"246","severity":1,"message":"247","line":19,"column":17,"nodeType":"248","endLine":19,"endColumn":20},{"ruleId":"246","severity":1,"message":"247","line":22,"column":17,"nodeType":"248","endLine":22,"endColumn":20},{"ruleId":"246","severity":1,"message":"247","line":25,"column":17,"nodeType":"248","endLine":25,"endColumn":20},{"ruleId":"249","severity":1,"message":"250","line":6,"column":5,"nodeType":"248","endLine":6,"endColumn":110},{"ruleId":"249","severity":1,"message":"250","line":10,"column":7,"nodeType":"248","endLine":10,"endColumn":108},{"ruleId":"249","severity":1,"message":"250","line":6,"column":13,"nodeType":"248","endLine":6,"endColumn":123},{"ruleId":"238","replacedBy":"251"},{"ruleId":"240","replacedBy":"252"},{"ruleId":"253","severity":1,"message":"254","line":18,"column":9,"nodeType":"255","endLine":18,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":19,"column":9,"nodeType":"255","endLine":19,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":23,"column":9,"nodeType":"255","endLine":23,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":50,"column":21,"nodeType":"255","endLine":50,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":95,"column":25,"nodeType":"255","endLine":95,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":103,"column":13,"nodeType":"255","endLine":103,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":120,"column":25,"nodeType":"255","endLine":120,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":133,"column":9,"nodeType":"255","endLine":133,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":134,"column":9,"nodeType":"255","endLine":134,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":135,"column":9,"nodeType":"255","endLine":135,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":136,"column":9,"nodeType":"255","endLine":136,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":158,"column":17,"nodeType":"255","endLine":158,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":161,"column":25,"nodeType":"255","endLine":161,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":172,"column":34,"nodeType":"258","messageId":"259","endLine":172,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":174,"column":17,"nodeType":"255","endLine":174,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":177,"column":34,"nodeType":"258","messageId":"259","endLine":177,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":179,"column":17,"nodeType":"255","endLine":179,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":186,"column":13,"nodeType":"255","endLine":186,"endColumn":23},{"ruleId":"260","severity":1,"message":"261","line":190,"column":16,"nodeType":"262","messageId":"263","endLine":190,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":198,"column":9,"nodeType":"255","endLine":198,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":199,"column":9,"nodeType":"255","endLine":199,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":200,"column":9,"nodeType":"255","endLine":200,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":226,"column":148,"nodeType":"262","messageId":"263","endLine":226,"endColumn":150},{"ruleId":"253","severity":1,"message":"254","line":266,"column":74,"nodeType":"255","endLine":266,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":272,"column":67,"nodeType":"255","endLine":272,"endColumn":77},{"ruleId":"253","severity":1,"message":"254","line":46,"column":21,"nodeType":"255","endLine":46,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":61,"column":9,"nodeType":"255","endLine":61,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":75,"column":9,"nodeType":"255","endLine":75,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":81,"column":38,"nodeType":"262","messageId":"263","endLine":81,"endColumn":40},{"ruleId":"260","severity":1,"message":"261","line":86,"column":77,"nodeType":"262","messageId":"263","endLine":86,"endColumn":79},{"ruleId":"253","severity":1,"message":"254","line":87,"column":13,"nodeType":"255","endLine":87,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":112,"column":21,"nodeType":"255","endLine":112,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":114,"column":25,"nodeType":"255","endLine":114,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":119,"column":21,"nodeType":"255","endLine":119,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":141,"column":25,"nodeType":"255","endLine":141,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":156,"column":9,"nodeType":"255","endLine":156,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":158,"column":9,"nodeType":"255","endLine":158,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":159,"column":9,"nodeType":"255","endLine":159,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":160,"column":9,"nodeType":"255","endLine":160,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":183,"column":17,"nodeType":"255","endLine":183,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":186,"column":25,"nodeType":"255","endLine":186,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":220,"column":34,"nodeType":"258","messageId":"259","endLine":220,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":222,"column":17,"nodeType":"255","endLine":222,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":223,"column":17,"nodeType":"255","endLine":223,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":224,"column":17,"nodeType":"255","endLine":224,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":225,"column":17,"nodeType":"255","endLine":225,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":229,"column":52,"nodeType":"258","messageId":"259","endLine":229,"endColumn":54},{"ruleId":"253","severity":1,"message":"254","line":233,"column":17,"nodeType":"255","endLine":233,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":235,"column":56,"nodeType":"258","messageId":"259","endLine":235,"endColumn":58},{"ruleId":"260","severity":1,"message":"261","line":237,"column":27,"nodeType":"262","messageId":"263","endLine":237,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":238,"column":82,"nodeType":"258","messageId":"259","endLine":238,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":242,"column":29,"nodeType":"255","endLine":242,"endColumn":39},{"ruleId":"260","severity":1,"message":"261","line":253,"column":51,"nodeType":"262","messageId":"263","endLine":253,"endColumn":53},{"ruleId":"253","severity":1,"message":"254","line":255,"column":13,"nodeType":"255","endLine":255,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":262,"column":9,"nodeType":"255","endLine":262,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":265,"column":13,"nodeType":"255","endLine":265,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":267,"column":9,"nodeType":"255","endLine":267,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":297,"column":148,"nodeType":"262","messageId":"263","endLine":297,"endColumn":150},{"ruleId":"253","severity":1,"message":"254","line":338,"column":74,"nodeType":"255","endLine":338,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":344,"column":62,"nodeType":"255","endLine":344,"endColumn":72},{"ruleId":"253","severity":1,"message":"254","line":350,"column":69,"nodeType":"255","endLine":350,"endColumn":79},{"ruleId":"253","severity":1,"message":"254","line":359,"column":68,"nodeType":"255","endLine":359,"endColumn":78},{"ruleId":"238","replacedBy":"264"},{"ruleId":"240","replacedBy":"265"},{"ruleId":"253","severity":1,"message":"254","line":18,"column":9,"nodeType":"255","endLine":18,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":19,"column":9,"nodeType":"255","endLine":19,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":23,"column":9,"nodeType":"255","endLine":23,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":50,"column":21,"nodeType":"255","endLine":50,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":95,"column":25,"nodeType":"255","endLine":95,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":103,"column":13,"nodeType":"255","endLine":103,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":120,"column":25,"nodeType":"255","endLine":120,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":133,"column":9,"nodeType":"255","endLine":133,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":134,"column":9,"nodeType":"255","endLine":134,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":135,"column":9,"nodeType":"255","endLine":135,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":136,"column":9,"nodeType":"255","endLine":136,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":158,"column":17,"nodeType":"255","endLine":158,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":161,"column":25,"nodeType":"255","endLine":161,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":172,"column":34,"nodeType":"258","messageId":"259","endLine":172,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":174,"column":17,"nodeType":"255","endLine":174,"endColumn":27},{"ruleId":"256","severity":1,"message":"257","line":177,"column":34,"nodeType":"258","messageId":"259","endLine":177,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":179,"column":17,"nodeType":"255","endLine":179,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":186,"column":13,"nodeType":"255","endLine":186,"endColumn":23},{"ruleId":"260","severity":1,"message":"261","line":190,"column":16,"nodeType":"262","messageId":"263","endLine":190,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":198,"column":9,"nodeType":"255","endLine":198,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":199,"column":9,"nodeType":"255","endLine":199,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":200,"column":9,"nodeType":"255","endLine":200,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":226,"column":148,"nodeType":"262","messageId":"263","endLine":226,"endColumn":150},{"ruleId":"253","severity":1,"message":"254","line":266,"column":74,"nodeType":"255","endLine":266,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":272,"column":67,"nodeType":"255","endLine":272,"endColumn":77},{"ruleId":"253","severity":1,"message":"254","line":46,"column":21,"nodeType":"255","endLine":46,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":61,"column":9,"nodeType":"255","endLine":61,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":75,"column":9,"nodeType":"255","endLine":75,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":81,"column":38,"nodeType":"262","messageId":"263","endLine":81,"endColumn":40},{"ruleId":"260","severity":1,"message":"261","line":86,"column":77,"nodeType":"262","messageId":"263","endLine":86,"endColumn":79},{"ruleId":"253","severity":1,"message":"254","line":87,"column":13,"nodeType":"255","endLine":87,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":112,"column":21,"nodeType":"255","endLine":112,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":114,"column":25,"nodeType":"255","endLine":114,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":119,"column":21,"nodeType":"255","endLine":119,"endColumn":31},{"ruleId":"253","severity":1,"message":"254","line":141,"column":25,"nodeType":"255","endLine":141,"endColumn":35},{"ruleId":"253","severity":1,"message":"254","line":156,"column":9,"nodeType":"255","endLine":156,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":158,"column":9,"nodeType":"255","endLine":158,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":159,"column":9,"nodeType":"255","endLine":159,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":160,"column":9,"nodeType":"255","endLine":160,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":183,"column":17,"nodeType":"255","endLine":183,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":186,"column":25,"nodeType":"255","endLine":186,"endColumn":35},{"ruleId":"256","severity":1,"message":"257","line":217,"column":34,"nodeType":"258","messageId":"259","endLine":217,"endColumn":36},{"ruleId":"253","severity":1,"message":"254","line":219,"column":17,"nodeType":"255","endLine":219,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":220,"column":17,"nodeType":"255","endLine":220,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":221,"column":17,"nodeType":"255","endLine":221,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":222,"column":17,"nodeType":"255","endLine":222,"endColumn":27},{"ruleId":"253","severity":1,"message":"254","line":223,"column":17,"nodeType":"255","endLine":223,"endColumn":27},{"ruleId":"260","severity":1,"message":"261","line":229,"column":51,"nodeType":"262","messageId":"263","endLine":229,"endColumn":53},{"ruleId":"253","severity":1,"message":"254","line":231,"column":13,"nodeType":"255","endLine":231,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":238,"column":9,"nodeType":"255","endLine":238,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":241,"column":13,"nodeType":"255","endLine":241,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":243,"column":9,"nodeType":"255","endLine":243,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":273,"column":148,"nodeType":"262","messageId":"263","endLine":273,"endColumn":150},{"ruleId":"253","severity":1,"message":"254","line":314,"column":74,"nodeType":"255","endLine":314,"endColumn":84},{"ruleId":"253","severity":1,"message":"254","line":320,"column":62,"nodeType":"255","endLine":320,"endColumn":72},{"ruleId":"253","severity":1,"message":"254","line":326,"column":69,"nodeType":"255","endLine":326,"endColumn":79},{"ruleId":"253","severity":1,"message":"254","line":335,"column":68,"nodeType":"255","endLine":335,"endColumn":78},{"ruleId":"238","replacedBy":"266"},{"ruleId":"240","replacedBy":"267"},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["268"],["269"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["268"],["269"],["268"],["269"],"no-global-assign","no-unsafe-negation"]