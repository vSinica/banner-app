[{"C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\index.js":"1","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\App.js":"2","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js":"3","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx":"4","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx":"5","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx":"6"},{"size":517,"mtime":1631687901327,"results":"7","hashOfConfig":"8"},{"size":2127,"mtime":1631687901324,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1631687901327,"results":"10","hashOfConfig":"8"},{"size":13754,"mtime":1631687901325,"results":"11","hashOfConfig":"8"},{"size":533,"mtime":1631687901326,"results":"12","hashOfConfig":"8"},{"size":11209,"mtime":1631687901326,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"11rkewy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\index.js",[],["30","31"],"C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\App.js",["32","33"],"import './App.css';\r\nimport Header from './components/Header/Header';\r\nimport {BrowserRouter, Route} from \"react-router-dom\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\nimport EditCategories from \"./components/EditCategories/EditCategories\";\r\nimport EditBanners from \"./components/EditBanners/EditBanners\";\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n        this.getCategoryFormData = this.getCategoryFormData.bind(this);\r\n    }\r\n\r\n    getCategoryFormData(category,reqid){\r\n        this.state.categoryName = category;\r\n        this.state.categoryReqId = reqid;\r\n        console.log(this.state.categoryName+'   '+this.state.categoryReqId);\r\n    }\r\n\r\n    OnClickCreateNewCategory = () => {\r\n        console.log(\"OnClickCreateNewCategory \");\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data:  JSON.stringify({category_name:this.state.categoryName,categoryReqId:this.state.categoryReqId}),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function() {\r\n                    console.log(\"add category query is success\")\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n\r\n                }.bind(this),\r\n                error: function(xhr, status, err) {\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n    }\r\n\r\n\r\n    ////component={() => <EditBanners updateData={this.updateData} />}\r\n\r\n    render(){\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <Header/>\r\n                    <Route path='/CategoryEdit' component={EditCategories}/>\r\n                    <Route path='/BannersEdit' component={EditBanners}/>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\reportWebVitals.js",[],"C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditBanners\\EditBanners.jsx",["34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65"],"import s from \"./EditBanners.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditBanners extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bannerName: \"\",\r\n            price: \"\",\r\n            currentBannerId: null,\r\n            currentCategory: \"\",\r\n            bannerText: \"\",\r\n            data: null,\r\n            isCreatingNewBanner: false,\r\n            allCategoryNames: \"\",\r\n            responseFromServer: \"\",\r\n            currentSearch: \"\"\r\n        };\r\n        this.OnClickSaveBanner =  this.OnClickSaveBanner.bind(this);\r\n    };\r\n\r\n    onClickDeleteBanner(e){\r\n        e.preventDefault();\r\n        if(this.state.bannerName==null || this.state.bannerText==null ||\r\n            this.state.bannerName===\"\" || this.state.bannerText===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteBanner',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"bannerId\": this.state.currentBannerId,\"category_id\": this.state.currentCategory}),\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success  \" + data);\r\n                this.setState({\r\n                    isLoaded: true\r\n                });\r\n                if (!data == null) {\r\n                    this.state.responseFromServer = data;\r\n                }\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        console.log(e.target.value);\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveBanner(e) {\r\n        e.preventDefault();\r\n\r\n        if(this.state.bannerName===\"\" || this.state.price===\"\" ||\r\n            this.state.bannerText===\"\" ){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        this.state.price = Number(this.state.price);\r\n        if(!Number.isInteger(this.state.price)){\r\n            alert(\"Price должно быть числом\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.currentCategory==\"\" && this.state.allCategoryNames[0]==null){\r\n            alert(\"Создайте хотя бы одня категорию!\");\r\n            return;\r\n        }\r\n\r\n        if(this.state.allCategoryNames != null && this.state.currentCategory==\"\")\r\n            this.state.currentCategory = this.state.allCategoryNames[0].name;\r\n\r\n        let banner =\r\n            {\r\n                id: this.state.currentBannerId,\r\n                bannerName: this.state.bannerName,\r\n                price: this.state.price,\r\n                currentCategory: this.state.currentCategory,\r\n                bannerText: this.state.bannerText\r\n            };\r\n\r\n        if (this.state.isCreatingNewBanner) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    this.state.isCreatingNewBanner = false;\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.state.isCreatingNewBanner = false;\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateBanner',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(banner),\r\n                dataType: 'json',\r\n                async: false,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update banner query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                    this.componentDidMount();\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OnClickCreateNewBanner = () => {\r\n        this.state.isCreatingNewBanner = true;\r\n\r\n        this.state.bannerName=\"\";\r\n        this.state.bannerText=\"\";\r\n        this.state.price=\"\";\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllBanners();\r\n    }\r\n\r\n    GetAllBanners = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetBanners',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewBanner = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewBanner=false\r\n                        : null\r\n                ));\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategoryNames',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: false,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    allCategoryNames: data,\r\n                    isLoaded: true\r\n                });\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n\r\n    }\r\n\r\n    saveToStateCurrentData = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id) {\r\n                this.state.currentBannerId = item.id;\r\n                this.state.bannerName = item.name;\r\n                this.state.price = item.price;\r\n                this.state.bannerText = item.content;\r\n                this.state.currentCategory = item.categoryId;\r\n            }\r\n        });\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentBannerId==null || id == this.state.currentBannerId)\r\n        {\r\n            this.state.currentBannerId = id;\r\n            this.saveToStateCurrentData(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentBanner = (id) => {\r\n        this.state.isCreatingNewBanner = false;\r\n        if(this.state.responseFromServer) {\r\n            this.componentDidMount();\r\n            this.state.responseFromServer = false;\r\n        }\r\n        this.state.currentBannerId = id;\r\n        this.saveToStateCurrentData(id);\r\n\r\n        this.render();\r\n        this.forceUpdate();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {error, isLoaded, data, allCategoryNames} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Banners:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                        autoFocus\r\n                        className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                                    <div>\r\n                                        <p onClick={() => this.setNewCurrentBanner(item.id)}\r\n                                           className={!this.state.isCreatingNewBanner ? this.getClassforLink(item.id) : null}>{item.name}</p>\r\n                                    </div>)\r\n                                : null\r\n                        ))}\r\n\r\n\r\n\r\n\r\n                        {this.state.isCreatingNewBanner ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New banner</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewBanner}>\r\n                                Create new banner\r\n                        </button>\r\n\r\n                    </div>\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewBanner ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new banner</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.bannerName} ID: {this.state.currentBannerId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.bannerName =e.target.value}}\r\n                                            defaultValue={this.state.bannerName}\r\n                                            key={this.state.bannerName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Price <input onChange={(e)=>{this.state.price = e.target.value}}\r\n                                                  defaultValue={this.state.price}\r\n                                                  key={this.state.price}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                   Category <select onChange={(e)=>{this.state.currentCategory = e.target.value}}\r\n                                                    defaultValue={this.state.currentCategory}\r\n                                                    key={this.state.currentCategory} >\r\n                                        {allCategoryNames.map(item => (\r\n                                            <option value={item} >{item}</option>\r\n                                        ))}\r\n                                    </select>\r\n                                </div>\r\n                                <div>\r\n                                    Text <textarea onChange={(e)=>{this.state.bannerText = e.target.value}}\r\n                                                    defaultValue={this.state.bannerText}\r\n                                                    key={this.state.bannerText}\r\n                                                    type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveBanner(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteBanner(e)}}\r\n                                   className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\Header\\Header.jsx",[],"C:\\Users\\Администратор\\IdeaProjects\\jartestwork\\jarTestWorkFrontendReact\\src\\components\\EditCategories\\EditCategories.jsx",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"import s from \"./EditCategories.module.css\";\r\nimport React, {Component} from \"react\";\r\nimport $ from \"jquery\";\r\n\r\n\r\nexport default class EditCategories extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            categoryName: \"\",\r\n            categoryReqId: \"\",\r\n            currentCategoryId: null,\r\n            data: null,\r\n            isCreatingNewCategory: false,\r\n            currentSearch: \"\",\r\n            responseFromServer: null\r\n        };\r\n        this.OnClickSaveCategory =  this.OnClickSaveCategory.bind(this);\r\n    };\r\n\r\n    OnChangeSearch(e){\r\n        e.preventDefault();\r\n        this.state.currentSearch = e.target.value;\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    onClickDeleteCategory(e){\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080/DeleteCategory',\r\n            contentType: 'application/json; charset=utf-8',\r\n            data:  JSON.stringify({\"idCategory\": this.state.currentCategoryId}),\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                console.log(\"delete category query is success\" + data);\r\n                this.setState({\r\n                    isLoaded: true,\r\n                });\r\n                if (data != null) {\r\n                    this.state.responseFromServer = data;\r\n\r\n                }\r\n\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n\r\n            }.bind(this)\r\n        });\r\n        this.componentDidMount();\r\n        this.forceUpdate();\r\n        this.render();\r\n    }\r\n\r\n    OnClickSaveCategory(e) {\r\n        e.preventDefault();\r\n        if(this.state.categoryName==null || this.state.categoryReqId==null ||\r\n            this.state.categoryName===\"\" || this.state.categoryReqId===\"\"){\r\n            alert(\"Вы ввели некорректные данные!!!\");\r\n            return;\r\n        }\r\n\r\n        let category =\r\n            {\r\n                category_name: this.state.categoryName,\r\n                categoryReqId: this.state.categoryReqId,\r\n                idCategory: this.state.currentCategoryId\r\n            };\r\n\r\n        if (this.state.isCreatingNewCategory) {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/AddCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"add category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n            this.state.isCreatingNewCategory = false;\r\n        }\r\n        else{\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: 'http://localhost:8080/UpdateCategory',\r\n                contentType: 'application/json; charset=utf-8',\r\n                data: JSON.stringify(category),\r\n                dataType: 'json',\r\n                async: true,\r\n                cache: false,\r\n                success: function (data) {\r\n                    console.log(\"update category query is success\" + data);\r\n                    this.setState({\r\n                        isLoaded: true\r\n                    });\r\n                    if (data != null) {\r\n                        this.state.responseFromServer = data;\r\n                    }\r\n                }.bind(this),\r\n                error: function (xhr, status, err) {\r\n                    this.componentDidMount();\r\n                    console.error(this.props.url, status, err.toString());\r\n                }.bind(this)\r\n            });\r\n        }\r\n        this.componentDidMount();\r\n    }\r\n\r\n    OnClickCreateNewCategory = () => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = true;\r\n        this.state.categoryName = \"\";\r\n        this.state.categoryReqId = \"\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetAllCategories();\r\n    }\r\n\r\n    GetAllCategories = () => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'http://localhost:8080//GetCategories',\r\n            contentType: 'application/json; charset=utf-8',\r\n            dataType: 'json',\r\n            async: true,\r\n            cache: false,\r\n            success: function(data) {\r\n                this.setState({\r\n                    data: data,\r\n                    isLoaded: true\r\n                });\r\n\r\n                this.state.isCreatingNewCategory = true;\r\n                data.map(item => (\r\n                    (!item.deleted) ?\r\n                        this.state.isCreatingNewCategory=false\r\n                        : null\r\n                ));\r\n            }.bind(this),\r\n            error: function(xhr, status, err) {\r\n                console.error(this.props.url, status, err.toString());\r\n            }.bind(this)\r\n        });\r\n    }\r\n\r\n    saveToStateNameReqId = (id) => {\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryName = item.name;\r\n        });\r\n\r\n        this.state.data.map(item => {\r\n            if (item.id === id)\r\n                this.state.categoryReqId = item.reqName;\r\n        });\r\n    }\r\n\r\n    getClassforLink = (id) => {\r\n        if(this.state.currentCategoryId==null)\r\n        {\r\n            this.state.currentCategoryId = id;\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n        if (id == this.state.currentCategoryId) {\r\n          ////  console.log(id +\" this id is active link\");\r\n            this.saveToStateNameReqId(id);\r\n            return s.activeLink;\r\n        }\r\n    }\r\n\r\n    setNewCurrentCategory = (id) => {\r\n        this.state.responseFromServer = null;\r\n        this.state.isCreatingNewCategory = false;\r\n        this.state.currentCategoryId = id;\r\n        this.saveToStateNameReqId(id);\r\n        this.componentDidMount();\r\n    }\r\n\r\n    render() {\r\n        const {error, isLoaded, data} = this.state;\r\n\r\n        if (error) {\r\n            return <p>Error</p>\r\n        } else if (!isLoaded) {\r\n            return <p> Loading... </p>\r\n        } else {\r\n            return (\r\n                <div className = {s.editcategories}>\r\n                    <div className = {s.nav}>\r\n                        <p className={s.categoryLabel}>Categories:</p>\r\n\r\n                        <input onChange={(e) => {this.OnChangeSearch(e)}}\r\n                               defaultValue={this.state.currentSearch}\r\n                               key={this.state.currentSearch}\r\n                               placeholder=\"Поиск\"\r\n                               autoFocus\r\n                               className={s.search}/>\r\n\r\n                        {data.map(item => (\r\n                            (!item.deleted && (item.name.toLowerCase().includes(this.state.currentSearch.toLowerCase()) || this.state.currentSearch==\"\")) ? (\r\n                            <div>\r\n                                <p onClick={()=>this.setNewCurrentCategory(item.id)}\r\n                                   className={!this.state.isCreatingNewCategory ? this.getClassforLink(item.id):null}>{item.name}</p>\r\n                            </div>\r\n                            ):null\r\n                        ))}\r\n                        {this.state.isCreatingNewCategory ?\r\n                            (\r\n                            <div>\r\n                                <p className={s.activeLink}>New category</p>\r\n                            </div>\r\n                            )\r\n                            : null\r\n                        }\r\n\r\n\r\n\r\n                        <button className={s.button}\r\n                                onClick={this.OnClickCreateNewCategory}>\r\n                                Create new category\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                        <form className={s.formclass}>\r\n                            {this.state.isCreatingNewCategory ?(\r\n                                    <div className={s.inputHeading}>\r\n                                        <p>Creating new category</p>\r\n                                    </div>\r\n                                )\r\n                                :\r\n                                <div className={s.inputHeading}>\r\n                                    <p>{this.state.categoryName} ID: {this.state.currentCategoryId}</p>\r\n                                </div>\r\n                            }\r\n\r\n                            <div className={s.inputBlock}>\r\n\r\n                                <div>\r\n                                <span>name</span> <input onChange={(e)=>{this.state.categoryName = e.target.value}}\r\n                                            defaultValue={this.state.categoryName}\r\n                                            key={this.state.categoryName}\r\n                                            type=\"text\"/>\r\n                                </div>\r\n                                <div>\r\n                                Request id <input onChange={(e)=>{this.state.categoryReqId = e.target.value}}\r\n                                                  defaultValue={this.state.categoryReqId}\r\n                                                  key={this.state.categoryReqId}\r\n                                                  type=\"text\"/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.responseFromServer ?\r\n                                <div className={s.notification}>\r\n                                    <p>{this.state.responseFromServer} </p>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n\r\n                            <div className={s.buttonBlock}>\r\n                                <p onClick={(e) => {this.OnClickSaveCategory(e)}}\r\n                                        className={s.savebutton} ><p>save</p></p>\r\n                                <p onClick={(e)=>{this.onClickDeleteCategory(e)}}\r\n                                        className={s.deletebutton} ><p>delete</p></p>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":18,"column":9,"nodeType":"95","endLine":18,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":19,"column":9,"nodeType":"95","endLine":19,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":46,"column":21,"nodeType":"95","endLine":46,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":61,"column":9,"nodeType":"95","endLine":61,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":75,"column":9,"nodeType":"95","endLine":75,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":81,"column":38,"nodeType":"98","messageId":"99","endLine":81,"endColumn":40},{"ruleId":"96","severity":1,"message":"97","line":86,"column":77,"nodeType":"98","messageId":"99","endLine":86,"endColumn":79},{"ruleId":"93","severity":1,"message":"94","line":87,"column":13,"nodeType":"95","endLine":87,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":112,"column":21,"nodeType":"95","endLine":112,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":114,"column":25,"nodeType":"95","endLine":114,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":119,"column":21,"nodeType":"95","endLine":119,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":141,"column":25,"nodeType":"95","endLine":141,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":156,"column":9,"nodeType":"95","endLine":156,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":158,"column":9,"nodeType":"95","endLine":158,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":159,"column":9,"nodeType":"95","endLine":159,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":160,"column":9,"nodeType":"95","endLine":160,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":183,"column":17,"nodeType":"95","endLine":183,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":186,"column":25,"nodeType":"95","endLine":186,"endColumn":35},{"ruleId":"100","severity":1,"message":"101","line":217,"column":34,"nodeType":"102","messageId":"103","endLine":217,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":219,"column":17,"nodeType":"95","endLine":219,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":220,"column":17,"nodeType":"95","endLine":220,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":221,"column":17,"nodeType":"95","endLine":221,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":222,"column":17,"nodeType":"95","endLine":222,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":223,"column":17,"nodeType":"95","endLine":223,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":229,"column":51,"nodeType":"98","messageId":"99","endLine":229,"endColumn":53},{"ruleId":"93","severity":1,"message":"94","line":231,"column":13,"nodeType":"95","endLine":231,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":238,"column":9,"nodeType":"95","endLine":238,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":241,"column":13,"nodeType":"95","endLine":241,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":243,"column":9,"nodeType":"95","endLine":243,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":273,"column":148,"nodeType":"98","messageId":"99","endLine":273,"endColumn":150},{"ruleId":"93","severity":1,"message":"94","line":314,"column":74,"nodeType":"95","endLine":314,"endColumn":84},{"ruleId":"93","severity":1,"message":"94","line":320,"column":62,"nodeType":"95","endLine":320,"endColumn":72},{"ruleId":"93","severity":1,"message":"94","line":326,"column":69,"nodeType":"95","endLine":326,"endColumn":79},{"ruleId":"93","severity":1,"message":"94","line":335,"column":68,"nodeType":"95","endLine":335,"endColumn":78},{"ruleId":"93","severity":1,"message":"94","line":23,"column":9,"nodeType":"95","endLine":23,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":50,"column":21,"nodeType":"95","endLine":50,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":95,"column":25,"nodeType":"95","endLine":95,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":103,"column":13,"nodeType":"95","endLine":103,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":120,"column":25,"nodeType":"95","endLine":120,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":133,"column":9,"nodeType":"95","endLine":133,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":134,"column":9,"nodeType":"95","endLine":134,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":135,"column":9,"nodeType":"95","endLine":135,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":136,"column":9,"nodeType":"95","endLine":136,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":158,"column":17,"nodeType":"95","endLine":158,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":161,"column":25,"nodeType":"95","endLine":161,"endColumn":35},{"ruleId":"100","severity":1,"message":"101","line":172,"column":34,"nodeType":"102","messageId":"103","endLine":172,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":174,"column":17,"nodeType":"95","endLine":174,"endColumn":27},{"ruleId":"100","severity":1,"message":"101","line":177,"column":34,"nodeType":"102","messageId":"103","endLine":177,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":179,"column":17,"nodeType":"95","endLine":179,"endColumn":27},{"ruleId":"93","severity":1,"message":"94","line":186,"column":13,"nodeType":"95","endLine":186,"endColumn":23},{"ruleId":"96","severity":1,"message":"97","line":190,"column":16,"nodeType":"98","messageId":"99","endLine":190,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":198,"column":9,"nodeType":"95","endLine":198,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":199,"column":9,"nodeType":"95","endLine":199,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":200,"column":9,"nodeType":"95","endLine":200,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":226,"column":148,"nodeType":"98","messageId":"99","endLine":226,"endColumn":150},{"ruleId":"93","severity":1,"message":"94","line":266,"column":74,"nodeType":"95","endLine":266,"endColumn":84},{"ruleId":"93","severity":1,"message":"94","line":272,"column":67,"nodeType":"95","endLine":272,"endColumn":77},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]